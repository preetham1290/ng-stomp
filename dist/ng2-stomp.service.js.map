{"version":3,"file":"ng2-stomp.service.js","sourceRoot":"","sources":["../src/ng2-stomp.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs/Rx';\n\ndeclare var Stomp: any;\ndeclare var SockJS: any;\ndeclare var Client: any;\n\nexport class Ng2StompService {\n    private stompClient: any = null;\n    private connectionAnnouncedSource = new Subject<any>();\n    connectionAnnounced$ = this.connectionAnnouncedSource.asObservable();\n\n    constructor() { }\n\n    announceconnection(connection: any) {\n        this.connectionAnnouncedSource.next(connection);\n    }\n\n    setUsedSubscription(subscrObj: any) {\n        this.stompClient.usedSubscriptions[subscrObj.id] = subscrObj;\n    }\n\n    getStompClient(url: string): Observable<any> {\n        let cl = Stomp.over(new SockJS(url, null, { transports: [], }));\n        cl['usedSubscriptions'] = {};\n        this.stompClient = cl;\n        return Observable.of(cl);\n    }\n\n    getConnection(configHeaders?: any): Observable<any> {\n        if (!this.stompClient || this.stompClient === null) {\n            throw new Error('stompClient cannot be null');\n        }\n        return Observable.of(this.stompClient.connect(configHeaders, () => {\n            this.announceconnection(this.stompClient);\n        }));\n    }\n\n    //Returns subscription Obj if needed to unSubscribe\n    subscribeToTopic(topic: string, callback?: Function, header?: { 'id': string }): Observable<any> {\n        if (header && this.stompClient) {\n            if (this.stompClient.usedSubscriptions[header.id]) {\n                return Observable.of(this.stompClient.usedSubscriptions[header.id]);\n            }\n        }\n        if (!this.stompClient || this.stompClient === null) {\n            throw new Error('stompClient cannot be null');\n        }\n        return Observable.of(this.stompClient.subscribe(topic, (message: any) => {\n            if (callback) {\n                callback(JSON.parse(message['body']));\n            }\n        }, header));\n    }\n\n    unSubscribe(subscriptionId: string) {\n        this.stompClient.usedSubscriptions[subscriptionId].unsubscribe();\n    }\n\n    sendMessage(destination: any, body: any, headers?: any): Observable<any> {\n        return Observable.of(this.stompClient.send(destination, headers, body));\n    }\n\n    disconnect() {\n        Observable.of(this.stompClient.disconnect(() => { }));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}