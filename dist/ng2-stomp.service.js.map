{"version":3,"file":"ng2-stomp.service.js","sourceRoot":"","sources":["../src/ng2-stomp.service.ts"],"names":[],"mappings":"OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,UAAU,EAAE,MAAM,SAAS;AAKpC;IAEI;IAAgB,CAAC;IAEjB,wCAAc,GAAd,UAAe,GAAW;QACtB,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,IAAI,EAChD,EAAE,UAAU,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED,uCAAa,GAAb,UAAc,WAAgB,EAAE,aAAmB,EAAE,QAAc;QAC/D,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;YACvC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,mDAAmD;IACnD,0CAAgB,GAAhB,UAAiB,WAAgB,EAAE,KAAa,EAAE,QAAa;QAC3D,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;YACvC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,UAAC,OAAY;YAC3D,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,qCAAW,GAAX,UAAY,YAAiB;QACzB,YAAY,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC;IAED,qCAAW,GAAX,UAAY,WAAgB,EAAE,WAAgB,EAAE,IAAS,EAAE,OAAa;QACpE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACvE,CAAC;IACE,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,sBAAC;AAAD,CAAC,AAvCD,IAuCC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Rx';\ndeclare var Stomp: any;\ndeclare var SockJS: any;\ndeclare var Client: any;\n\nexport class Ng2StompService {\n\n    constructor() { }\n\n    getStompClient(url: string): Observable<any> {\n        return Observable.of(Stomp.over(new SockJS(url, null,\n            { transports: [], })));\n    }\n\n    getConnection(stompClient: any, configHeaders?: any, callback?: any): Observable<any> {\n        if (!stompClient || stompClient === null) {\n            throw new Error('stompClient cannot be null');\n        }\n        return Observable.of(stompClient.connect(configHeaders, callback));\n    }\n\n    //Returns subscription Obj if needed to unSubscribe\n    subscribeToTopic(stompClient: any, topic: string, callback: any): Observable<any> {\n        if (!stompClient || stompClient === null) {\n            throw new Error('stompClient cannot be null');\n        }\n        return Observable.of(stompClient.subscribe(topic, (message: any) => {\n            callback(JSON.parse(message['body']));\n        }));\n    }\n\n    unSubscribe(subscription: any) {\n        subscription.unsubscribe();\n    }\n\n    sendMessage(stompClient: any, destination: any, body: any, headers?: any): Observable<any> {\n        return Observable.of(stompClient.send(destination, headers, body));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}